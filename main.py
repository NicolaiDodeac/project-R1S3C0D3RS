from contacts.contacts_commands import *
from storage.file_handler_contacts import load_data, save_data
from helpers.rich_output import (
    success_message,
    error_message,
    info_message,
    print_title,
)
from rich.prompt import Prompt
from rich import print
from prompt_toolkit import prompt
from helpers.help_text import show_help
from contacts.contact_flow import ask_name_and_phone, ask_birthday, ask_email
from helpers.autocomplete import get_user_command
from helpers.handlers import (
    handle_update_phone,
    handle_update_email,
    handle_show_birthday,
    handle_add_birthday,
    handle_add_phone,
    handle_show_phone,
)
from notes.notes_commands import add_notes, show_notes, find_note, dell_note
from helpers.constants import COMMANDS


def main():
    book = load_data()
    print_title("üìî Welcome to the assistant bot!")
    show_help()
    while True:
        print("[bold green](TAB –¥–ª—è –ø—ñ–¥–∫–∞–∑–∫–∏)[/bold green]")
        user_input = get_user_command()

        # user_input = Prompt.ask("[bold green]–í–≤–µ–¥—ñ—Ç—å –∫–æ–º–∞–Ω–¥—É[/bold green]")
        command, args = parse_input(user_input)

        if command in ["exit", "close"]:
            save_data(book)
            success_message("üëã –î–æ –ø–æ–±–∞—á–µ–Ω–Ω—è!")
            break

        elif command == "hello":
            info_message("üñê –Ø–∫ —è –º–æ–∂—É –≤–∞–º –¥–æ–ø–æ–º–æ–≥—Ç–∏?")

        elif command == "add":
            action = (
                Prompt.ask(
                    "[bold green]–©–æ –≤–∏ —Ö–æ—á–µ—Ç–µ –¥–æ–¥–∞—Ç–∏? ('contact' –∞–±–æ 'note')[/bold green]"
                )
                .strip()
                .lower()
            )

            if action == "note":
                result = add_notes()
                info_message(result)

            elif action == "contact":
                name, phone = ask_name_and_phone()
                if not name:
                    continue

                record = book.find(name.lower())
                if not record:
                    record = Record(name)
                    book.add_record(record)
                record.add_phone(phone)

                birthday = ask_birthday()
                if birthday:
                    record.add_birthday(birthday.strftime("%d.%m.%Y"))

                email = ask_email()
                if email:
                    record.add_email(email)

                save_data(book)
                success_message(f"‚úÖ –ö–æ–Ω—Ç–∞–∫—Ç {name} —É—Å–ø—ñ—à–Ω–æ –∑–±–µ—Ä–µ–∂–µ–Ω–æ!")
            else:
                error_message("‚ö†Ô∏è –î–æ—Å—Ç—É–ø–Ω—ñ –≤–∞—Ä—ñ–∞–Ω—Ç–∏: 'contact' –∞–±–æ 'note'")

        elif command == "add-phone":
            handle_add_phone(book)

        elif command == "update-phone":
            handle_update_phone(book)

        elif command == "phone":
            handle_show_phone(book)

        elif command == "all":
            show_all(book)

        elif command == "update-birthday":
            handle_add_birthday(book)

        elif command == "update-email":
            handle_update_email(book)

        elif command == "show-birthday":
            handle_show_birthday(book)

        elif command == "birthdays":
            result = birthdays(args, book)
            info_message(result)

        elif command == "find":
            table = Table(title="–î–æ—Å—Ç—É–ø–Ω—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –¥–ª—è –ø–æ—à—É–∫–æ–º:", show_lines=True)
            table.add_column("–ù–æ–º–µ—Ä –∫–æ–º–∞–Ω–¥–∏", style="bold cyan", justify="left")
            table.add_column("–û–ø–∏—Å", style="white", justify="left")
            table.add_row("1", "–ü–æ—à—É–∫ –∑–∞ —ñ–º–µ–Ω–µ–º –∞–±–æ —á–∞—Å—Ç–∏–Ω–æ—é —ñ–º–µ–Ω—ñ (name)")
            table.add_row("2", "–ü–æ—à—É–∫ –∑–∞ –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω—É –∞–±–æ —á–∞—Å—Ç–∏–Ω–æ—é –Ω–æ–º–µ—Ä–∞ (phone)")
            table.add_row("3", "–ü–æ—à—É–∫ –∑–∞ –ø–æ—à—Ç–æ—é –∞–±–æ —á–∞—Å—Ç–∏–Ω–æ—é –ø–æ—à—Ç–∏ (email)")
            table.add_row("4", "–ü–æ—à—É–∫ –∑–∞ –¥–Ω–µ–º –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è (birthday)")
            console.print(table)
            param = input("–í–≤–µ–¥—ñ—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –ø–æ—à—É–∫—É: ")
            if not param or param not in ["1", "2", "3", "4"]:
                error_message("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π –ø–∞—Ä–∞–º–µ—Ç—Ä. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
                continue
            dataFind = input("–í–≤–µ–¥—ñ—Ç—å –¥–∞–Ω—ñ –¥–ª—è –ø–æ—à—É–∫—É: ")
            result = findOne(dataFind, param, book)
            console.print(result)

        elif command == "delete":
            name = input("–í–≤–µ–¥—ñ—Ç—å —ñ–º'—è –∫–æ–Ω—Ç–∞–∫—Ç—É –¥–ª—è –≤–∑–∞—î–º–æ–¥—ñ—ó: ")
            record = book.find(name.lower())
            if record:
                table = Table(
                    title="–î–æ—Å—Ç—É–ø–Ω—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è:", show_lines=True
                )
                table.add_column("–ù–æ–º–µ—Ä –∫–æ–º–∞–Ω–¥–∏", style="bold cyan", justify="left")
                table.add_column("–û–ø–∏—Å", style="white", justify="left")
                table.add_row("1", "–í–∏–¥–∞–ª–∏—Ç–∏ —Ü—ñ–ª–∏–π –∫–æ–Ω—Ç–∞–∫—Ç")
                table.add_row("2", "–í–∏–¥–∞–ª–∏—Ç–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É")
                table.add_row("3", "–í–∏–¥–∞–ª–∏—Ç–∏ –ø–æ—à—Ç—É")
                table.add_row("4", "–í–∏–¥–∞–ª–∏—Ç–∏ –¥–µ–Ω—å –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è")
                console.print(table)
                param = input("–í–≤–µ–¥—ñ—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è: ")
                if not param or param not in ["1", "2", "3", "4"]:
                    error_message("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π –ø–∞—Ä–∞–º–µ—Ç—Ä. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
                    continue

                deleteOne(param, book, name)
                if not name:
                    error_message("‚ùå –í–≤–µ–¥—ñ—Ç—å —ñ–º'—è –∫–æ–Ω—Ç–∞–∫—Ç—É –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è.")
                    continue
            else:
                error_message(f"‚ùå –ö–æ–Ω—Ç–∞–∫—Ç {name} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")

        elif command == "note":
            result = add_notes()
            info_message(result)
            success_message(f"‚úÖ –ù–æ—Ç–∞—Ç–∫–∞ {result.name_note} —É—Å–ø—ñ—à–Ω–æ –∑–±–µ—Ä–µ–∂–µ–Ω–æ!")

        elif command == "show-note":
            result = show_notes()
            info_message(result)

        elif command == "find-note":
            result = find_note()
            info_message(result)

        elif command == "dell-note":
            dell_note()

        elif command == "help":
            show_help()

        else:
            commands = COMMANDS

            matches = [(comm, len(set(comm) & set(command))) for comm in commands]
            best_match = max(matches, key=lambda x: x[1], default=None)

            if best_match and best_match[1] > 0:
                suggestion = best_match[0]
                error_message(
                    f"‚ùå –ù–µ–≤—ñ—Ä–Ω–∞ –∫–æ–º–∞–Ω–¥–∞. –ú–æ–∂–ª–∏–≤–æ, –≤–∏ –º–∞–ª–∏ –Ω–∞ —É–≤–∞–∑—ñ '[bold green]{suggestion}[/bold green]'?"
                )
            else:
                error_message(
                    "‚ùå –ù–µ–≤—ñ—Ä–Ω–∞ –∫–æ–º–∞–Ω–¥–∞. –í–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ 'help' –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –∫–æ–º–∞–Ω–¥."
                )


if __name__ == "__main__":

    main()
