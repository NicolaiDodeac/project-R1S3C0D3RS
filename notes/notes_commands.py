from notes.models import Note
from datetime import datetime
from rich.prompt import Prompt
from storage.file_handler_notes import save_notes, load_notes
from rich.console import Console
from rich.table import Table
from helpers.rich_output import console
from helpers.rich_output import error_message, success_message, info_message


notes = load_notes()


def add_notes():
    while True:
        name_note = Prompt.ask("[bold green]–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –Ω–æ—Ç–∞—Ç–∫–∏[/bold green]")
        for note in notes: #–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ —É–Ω—ñ–∫–∞–ª—å–µ—ñ—Å—Ç—å —ñ–º–µ–Ω—ñ
            if note.name_note.lower() == name_note.lower():
                error_message (f"–ù–æ—Ç–∞—Ç–∫–∞ –∑ –Ω–∞–∑–≤–æ—é {name_note} –≤–∂–µ —ñ—Å–Ω—É—î, –≤–≤–µ–¥—ñ—Ç—å —ñ–Ω—à–µ —ñ–º—è")
                break
        else:
            break
    body_note = Prompt.ask("[bold blue]–í–≤–µ–¥—ñ—Ç—å —Ç–µ–∫—Å—Ç –Ω–æ—Ç–∞—Ç–∫–∏[/bold blue]")
    tag_note = Prompt.ask("[bold green]–í–≤–µ–¥—ñ—Ç—å —Ç–µ–≥ –∞–±–æ 'skip'[/bold green]")

    if tag_note.lower() == "skip":
        tag_note = None
    else:
        tag_note = tag_note.strip()
        if not tag_note.startswith("#"):
            tag_note = f"#{tag_note}"

    note = Note(name_note, body_note, tag_note)
    notes.append(note)
    save_notes(notes)
    return f"–ù–æ—Ç–∞—Ç–∫—É '{name_note}' —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ!"


def show_notes():
    if not notes:
        return "–£ —Ç–µ–±–µ —â–µ –Ω–µ–º–∞—î –∂–æ–¥–Ω–æ—ó –Ω–æ—Ç–∞—Ç–∫–∏"

    table = Table(title="–ü–µ—Ä–µ–ª—ñ–∫ —Ç–≤–æ—ó—Ö –Ω–æ—Ç–∞—Ç–æ–∫", show_lines=True)

    table.add_column("‚Ññ–ø/–ø", style="white", justify="center")
    table.add_column("–ù–∞–∑–≤–∞", style="cyan", justify="center")
    table.add_column("–¢–µ–∫—Å—Ç", style="white", justify="center")
    table.add_column("–¢–µ–≥", style="blue", justify="center")
    table.add_column("–î–∞—Ç–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è", style="green", justify="center")

    for index, note in enumerate(notes, start=1):
        table.add_row(
            str(index),
            note.name_note,
            note.body_note,
            note.tag_note if note.tag_note else "-",
            note.date_created.strftime("%d.%m.%Y"),
        )

    return table

def find_note():
    keyword = Prompt.ask("[bold green]–í–≤–µ–¥—ñ—Ç—å –∫–ª—é—á–æ–≤–µ —Å–ª–æ–≤–æ –∞–±–æ #—Ç–µ–≥[/bold green]").lower()

    found = []
    for note in notes:
        if (
            keyword in note.name_note.lower()
            or keyword in note.body_note.lower()
            or (note.tag_note and keyword in note.tag_note.lower())
        ):
            found.append(note)

    if not found:
        return "üîç –ó–∞ –∑–∞–ø–∏—Ç–æ–º –Ω—ñ—á–æ–≥–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ."

    table = Table(title=f"üîé –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –ø–æ—à—É–∫—É –∑–∞ '{keyword}'", show_lines=True)
    table.add_column("‚Ññ", style="white", justify="center")
    table.add_column("–ù–∞–∑–≤–∞", style="cyan", justify="center")
    table.add_column("–¢–µ–∫—Å—Ç", style="white", justify="center")
    table.add_column("–¢–µ–≥", style="blue", justify="center")
    table.add_column("–î–∞—Ç–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è", style="green", justify="center")

    for idx, note in enumerate(found, start=1):
        table.add_row(
            str(idx),
            note.name_note,
            note.body_note,
            note.tag_note or "-",
            note.date_created.strftime("%d.%m.%Y"),
        )
    return table

def dell_note(): #–≤–∏–¥–∞–ª—è—Ç–∏ –Ω–æ—Ç–∞—Ç–∫—É –º–æ–¥–Ω–∞ –ø–æ –Ω–∞–∑–≤—ñ
    keyword = Prompt.ask("[bold green]–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –Ω–æ—Ç–∞—Ç–∫–∏[/bold green]").lower()
    for note in notes:
        if keyword in note.name_note.lower():
            confirm = Prompt.ask(f"[bold red]–í–∏ —Ç–æ—á–Ω–æ —Ö–æ—á–µ—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏ '{note.name_note}'? (Y/N)[/bold red]")
            if confirm.lower() == "y":
                notes.remove(note)
                save_notes(notes)
                success_message(f"–ù–æ—Ç–∞—Ç–∫–∞ –∑ —ñ–º\'–º {keyword} –≤–∏–¥–∞–ª–µ–Ω–∞ –∑—ñ —Å–ø–∏—Å–∫—É –Ω–æ—Ç–∞—Ç–æ–∫")
                return
            else:
                info_message("–í–∏–¥–∞–ª–µ–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ")
                return
    info_message(f"–ù–æ—Ç–∞—Ç–∫–∞ –∑ –Ω–∞–∑–≤–æ—é {keyword} –Ω–µ —ñ—Å–Ω—É—î")

def change_note():
    question = Prompt.ask("[bold green]–ó–∞ —è–∫–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º –±—É–¥–µ–º–æ —à—É–∫–∞—Ç–∏ –Ω–æ—Ç–∞—Ç–∫—É? –ù–∞—Ç–∏c–Ω–∏ –∑–∞ –Ω–∞–∑–≤–æ—é - 1. –ó–∞ —Ç–µ–≥–æ–º - 2[/bold green]")
    if question == "1":
        answer_1 = Prompt.ask("[bold green]–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –Ω–æ—Ç–∞—Ç–∫–∏[/bold green]")
        for note in notes:
            if answer_1 in note.name_note.lower():
                info_message(f"–ó–Ω–∞–π–¥–µ–Ω–æ –Ω–æ—Ç–∞—Ç–∫—É –∑ –Ω–∞–∑–≤–æ—é: {note.name_note}")
                new_body = Prompt.ask("–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–∏–π —Ç–µ–∫—Å—Ç –Ω–æ—Ç–∞—Ç–∫–∏:")
                note.body_note = new_body
                save_notes(notes)
                success_message(f"–ù–æ—Ç–∞—Ç–∫–∞ –∑ —ñ–º\'–º {answer_1} —É–º–ø—ñ—à–Ω–æ –≤—ñ–¥—Ä–µ–¥–∞–≥–æ–≤–∞–Ω–æ")
                return
        info_message("–ù–æ—Ç–∞—Ç–∫–∏ –∑–∞ —Ç–∞–∫–æ—é –Ω–∞–∑–≤–æ—é –Ω–µ —ñ—Å–Ω—É—î. –¢–∏ –º–æ–∂–µ—à —Å—Ç–≤–æ—Ä—Ç–∏ –Ω–æ–≤—É –Ω–æ—Ç–∞—Ç–∫—É. –°–∫–æ—Ä–∏—Å—Ç–∞–π—Å—è –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ—é –∫–æ–º–∞–Ω–¥–æ—é ")
    
    elif question == "2":
        answer_2 = Prompt.ask("[bold green]–í–≤–µ–¥—ñ—Ç—å —Ç–µ–≥ –ø–æ—á–∏–Ω–∞—é—á–∏ –∑ #[/bold green]")
        result = []
        for note in notes:
            if note.tag_note and answer_2 == note.tag_note:
                result.append(note)
        
        if not result:
            info_message("–ù–æ—Ç–∞—Ç–æ–∫ –∑ —Ç–∞–∫–∏–º —Ç–µ–≥–æ–º –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
            return
        

        # –í–∏–≤–æ–¥–∏–º–æ –∑–Ω–∞–π–¥–µ–Ω—ñ –Ω–æ—Ç–∞—Ç–∫–∏ –≤ —Ç–∞–±–ª–∏—Ü—ñ
        table = Table(title="–ó–Ω–∞–π–¥–µ–Ω—ñ –Ω–æ—Ç–∞—Ç–∫–∏", show_lines=True)
        table.add_column("‚Ññ", justify="center")
        table.add_column("–ù–∞–∑–≤–∞", style="cyan")
        table.add_column("–¢–µ–∫—Å—Ç", style="white")

        for idx, note in enumerate(result, start=1):
            table.add_row(str(idx), note.name_note, note.body_note)

        console.print(table)

        # –ó–∞–ø–∏—Ç –Ω–æ–º–µ—Ä–∞ –Ω–æ—Ç–∞—Ç–∫–∏ –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è
        number = Prompt.ask("[bold green]–í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä –Ω–æ—Ç–∞—Ç–∫–∏ –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è[/bold green]")

        try:
            note_to_edit = result[int(number) - 1]
        except (ValueError, IndexError):
            error_message("–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π –Ω–æ–º–µ—Ä –Ω–æ—Ç–∞—Ç–∫–∏.")
            return

        new_body = Prompt.ask("[bold green]–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–∏–π —Ç–µ–∫—Å—Ç –Ω–æ—Ç–∞—Ç–∫–∏[/bold green]")
        note_to_edit.body_note = new_body
        save_notes(notes)
        success_message(f"–ù–æ—Ç–∞—Ç–∫–∞ –∑ —ñ–º º—è–º '{note_to_edit.name_note}' —É—Å–ø—ñ—à–Ω–æ –≤—ñ–¥—Ä–µ–¥–∞–≥–æ–≤–∞–Ω–∞!")

    else:
        error_message("–í–≤–µ–¥–µ–Ω–æ –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π –ø–∞—Ä–∞–º–µ—Ç—Ä. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
        return